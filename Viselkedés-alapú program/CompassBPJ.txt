package bpj5;

import lejos.hardware.motor.Motor;
import lejos.robotics.navigation.DifferentialPilot;
import lejos.robotics.navigation.RotateMoveController;
import lejos.robotics.subsumption.Behavior;
import lejos.utility.Delay;

public class CompassBPJ implements Behavior {

	SampleBPJ cs;
	float compassAngle;
	DifferentialPilot pilot = new DifferentialPilot(1.5F, 6, Motor.B, Motor.C, true);
	static boolean startUltrasonic2 = false;
	boolean suppressed;

	public CompassBPJ(SampleBPJ cs, RotateMoveController p) {
		this.cs = cs;
		this.pilot = (DifferentialPilot) p;

		pilot.setLinearSpeed(1.5);
		Motor.B.setSpeed(300);
		Motor.C.setSpeed(300);
		pilot.setAngularSpeed(40.0);
		System.out.println(UltrasonicBPJ.returnStartCompass());

	}

	@Override
	public boolean takeControl() {
		compassAngle = cs.mesure();

		return (UltrasonicBPJ.returnStartCompass() && (compassAngle >= RotateBPJ.returnStartingPosition() - 2.0)
				&& (compassAngle <= RotateBPJ.returnStartingPosition() + 2.0));
	}

	@Override
	public void action() {
		suppressed = false;
		while (!suppressed) {
			compassAngle = cs.mesure();

			pilot.stop();
			pilot.rotate(55);

			startUltrasonic2 = true;
			Delay.msDelay(10);

		}
	}

	public static boolean returnStartUltrasonic2() {
		return startUltrasonic2;
	}

	@Override
	public void suppress() {
		suppressed = true;

	}

}
